{"/about/":{"data":{"":"Soy Emilio Junoy, un estudiante de la licenciatura en matemáticas de la UNAM que está realizando su tesis de licenciatura en el campo de la teoría homotópica de tipos. Me interesa la computación y las matemáticas, en especial la inteligencia artificial, la ciberseguridad, la topología, la teoría de categorías y la teoría de tipos."},"title":"¿Quién soy?"},"/notas/":{"data":{"":"Esta es la sección donde guardo mis notas. Por ahora, puedes encontrar los siguientes temas:\nTeoría de tipos"},"title":"Notas"},"/notas/tipos/":{"data":{"":"Estas son mis notas sobre teoría de tipos. Por ahora aquí puedes encontrar los siguientes sub-temas Introducción a la teoría homotópica de tipos (Rijke)"},"title":"Tipos"},"/notas/tipos/lean/":{"data":{"":"Estas son mis notas sobre lean. Por ahora aquí puedes encontrar los siguientes sub-temas"},"title":"Lean"},"/notas/tipos/lean/test/":{"data":{"":"def x := 2 #check x x : Nat"},"title":"Test"},"/notas/tipos/rijke/":{"data":{"":"Estas son mis notas sobre el libro “Introducción a la teoría homotópica de tipos” de Rijke.\nTeoría de tipos dependiente funciones-dependientes"},"title":"Rijke"},"/notas/tipos/rijke/dependiente/":{"data":{"":"La teoría de tipos dependiente es un conjunto de reglas de inferencia que se pueden combinar para crear derivaciones. El objetivo de estas derivaciones es frecuentemente construir un elemento de un cierto tipo. En cierto sentido, un tipo no es más que una colección de objetos matemáticos y construir elementos de un cierto tipo es el desafío matemático del día a día. y construir elementos de un cierto tipo es el desafío matemático del día a día.","debilitamiento#Debilitamiento":"Si se nos da un tipo AAA en un contexto Γ\\GammaΓ, entonces cualquier juicio hecho en un contexto más largo Γ,Δ\\Gamma, \\DeltaΓ,Δ también se puede hacer en el contexto Γ,x:A,Δ\\Gamma, x: A, \\DeltaΓ,x:A,Δ para una nueva variable xxx. La regla de debilitamiento afirma que el debilitamiento por un tipo AAA en un contexto preserva la buena formación y la igualdad juiciosa de tipos y elementos.\nΓ⊢A type Γ,Δ⊢JΓ,x:A,Δ⊢JW. \\dfrac{\\Gamma \\vdash A ~~~ \\text{type} ~~~ ~~~ \\Gamma, \\Delta \\vdash \\mathcal{J}}{\\Gamma, x: A, \\Delta \\vdash \\mathcal{J}}W. Γ,x:A,Δ⊢JΓ⊢A type Γ,Δ⊢J​W.Este proceso de expandir el contexto por una variable de tipo AAA se llama debilitamiento por AAA.\nEn la situación más simple, tenemos dos tipos AAA y BBB en un contexto Γ\\GammaΓ. Entonces podemos debilitar a BBB por AAA como sigue:\nΓ⊢A type Γ⊢B typeΓ,x:A⊢B type \\dfrac{\\Gamma \\vdash A ~~~ \\text{type} ~~~ ~~~ \\Gamma \\vdash B ~~~ \\text{type}}{\\Gamma, x: A \\vdash B ~~~ \\text{type}} Γ,x:A⊢B typeΓ⊢A type Γ⊢B type​ El tipo BBB en el contexto Γ,x:A\\Gamma, x: AΓ,x:A es llamado la familia constante BBB o la familia trivial BBB.","derivaciones#Derivaciones":"Una derivación en la teoría de tipos es un árbol finito en el que cada nodo es una regla de inferencia válida.","familias-de-tipos#Familias de tipos":"Definición 1.2.1: Consideremos un tipo AAA en un contexto Γ\\GammaΓ. Una famlia de tipos sobre AAA en el contexto Γ\\GammaΓ es un tipo B(x)B(x)B(x) en el contexto Γ,x:A\\Gamma, x: AΓ,x:A. En otras palabras, en la situación en la que Γ,x:A⊢B(x) type\\Gamma, x: A \\vdash B(x) ~~~ \\text{type}Γ,x:A⊢B(x) type, decimos que BBB es una familia de tipos sobre AAA en el contexto Γ\\GammaΓ. Alternativamente, decimos que B(x)B(x)B(x) es un tipo indizado por x:Ax: Ax:A en el contexto Γ\\GammaΓ. Un ejemplo básico de familia de tipos ocurrirá cuando intrdouzcamos los tipos identidad. Se introducen como sigue: Γ⊢a:AΓ,x:A⊢a=x type. \\frac{\\Gamma \\vdash a: A}{\\Gamma, x: A \\vdash a = x ~~~ \\text{type}}. Γ,x:A⊢a=x typeΓ⊢a:A​. Esta regla asegura que dado un elemento a:Aa: Aa:A en un contexto Γ\\GammaΓ, podemos formar el tipo a=xa = xa=x en el contexto Γ,x:A\\Gamma, x: AΓ,x:A. El tipo a=xa = xa=x en el contexto Γ,x:A\\Gamma, x: AΓ,x:A es un ejemplo de una familia de tipos sobre AAA en el contexto Γ\\GammaΓ.\nDefinición 1.2.2: Consideremos una familia de tipos BBB sobre AAA en un contexto Γ\\GammaΓ. Una sección de la familia BBB sobre AAA en el contexto Γ\\GammaΓ es un elemento de tipo B(x)B(x)B(x) en el contexto Γ,x:A\\Gamma, x: AΓ,x:A, es decir, en el juicio Γ,x:A⊢b(x):B(x). \\Gamma, x: A \\vdash b(x): B(x). Γ,x:A⊢b(x):B(x). Decimos que bbb es una sección de la familia BBB sobre AAA en el contexto Γ\\GammaΓ. Alternativamente, decimos que b(x)b(x)b(x) es un elemento de tipo B(x)B(x)B(x) indizado por x:Ax: Ax:A en el contexto Γ\\GammaΓ.","juicios-y-contextos#Juicios y contextos":"Un argumento matemático consiste de una sucesión de pasos, cada uno con una cantidad finita de premisas para llegar a la siguiente etapa de la demostración o construcción. Estos pasos se pueden representar mediante reglas de inferencia, que se escriben en la forma H1 H2…HnC \\frac{\\mathcal{H}_1 ~~~ \\mathcal{H}_2 \\ldots \\mathcal{H}_n}{\\mathcal{C}} CH1​ H2​…Hn​​ Arriba de la línea horizontal hay una lista finita de juicios como las premisas y, debajo, un sólo juicio llamado la conclusión. El sistema de la teoría de tipos está descrito por una serie de reglas de inferencias.\nUn ejemplo de regla de inferencia lo obtenemos con los tipos función: Γ⊢a:A Γ⊢f:A→BΓ⊢f(a):B. \\frac{\\Gamma \\vdash a: A ~~~ \\Gamma \\vdash f: A \\to B}{\\Gamma \\vdash f(a): B}. Γ⊢f(a):BΓ⊢a:A Γ⊢f:A→B​. Esta regla afirma que en un contexto Γ\\GammaΓ podemos usar un elemento a:Aa: Aa:A y una función f:A→Bf: A \\to Bf:A→B para obtener un elemento f(a):Bf(a): Bf(a):B. Cada una de las expresiones\nΓ⊢a:A\\Gamma \\vdash a: AΓ⊢a:A Γ⊢f:A→B\\Gamma \\vdash f: A \\to BΓ⊢f:A→B Γ⊢f(a):B\\Gamma \\vdash f(a): BΓ⊢f(a):B son ejemplos de juicios.\nDefinición 1.1.1: Hay cuatro tipos de juicios en la teoría de tipos de Marrtin-Löf:\nAAA es un tipo (bien formado) en un contexto Γ\\GammaΓ. Expresamos este juicio como Γ⊢A type. \\Gamma \\vdash A ~~~ \\text{type}. Γ⊢A type. AAA y BBB son tipos juiciosamente iguales en un contexto Γ\\GammaΓ. Expresamos este juicio como Γ⊢A=⋅B type\\Gamma \\vdash A \\stackrel{\\cdot}{=} B ~~~ \\text{type}Γ⊢A=⋅B type aaa es un elemento de tipo AAA en un contexto Γ\\GammaΓ. Expresamos este juicio como Γ⊢a:A. \\Gamma \\vdash a: A. Γ⊢a:A. aaa y bbb son elementos juiciosamente iguales de tipo AAA en un contexto Γ\\GammaΓ. Expresamos este juicio como Γ⊢a=⋅b:A. \\Gamma \\vdash a \\stackrel{\\cdot}{=} b: A. Γ⊢a=⋅b:A. Observemos que cualquier juicio es de la forma Γ⊢J\\Gamma \\vdash \\mathcal{J}Γ⊢J, donde Γ\\GammaΓ es un contexto y J\\mathcal{J}J es una tesis de juicio con una de las formas que mencionamos antes. El rol del contexto es declarar los elementos hipotéticos que son asumidos junto con sus tipos. Los elementos hipotéticos también son llamados variables.\nDefinición 1.1.2: Un contexto es una lista finita de declaraciones de variables x1:A1,x2:A2(x1),…,xn:An(x1,…,xn−1) x_1: A_1, x_2: A_2(x_1), \\ldots, x_n: A_n(x_1, \\ldots, x_{n-1}) x1​:A1​,x2​:A2​(x1​),…,xn​:An​(x1​,…,xn−1​) que satisface la condición de que para cada 1≤k≤n1 \\leq k \\leq n1≤k≤n podemos derivar el juicio x1:A1,…,xk−1:Ak−1(x1,…,xk−2)⊢Ak(x1,…,xk−1) type x_1: A_1, \\ldots, x_{k-1}: A_{k-1}(x_1, \\ldots, x_{k-2}) \\vdash A_k(x_1, \\ldots, x_{k-1}) ~~~ \\text{type} x1​:A1​,…,xk−1​:Ak−1​(x1​,…,xk−2​)⊢Ak​(x1​,…,xk−1​) type usando las reglas de inferencia de la teoría de tipos.\nLa condición en la definición 1.1.2 de que cada elemento hipotético tiene un tipo asignado, se verifica recursivamente.","la-igualdad-juiciosa-es-una-regla-de-equivalencia#La igualdad juiciosa es una regla de equivalencia":"Las reglas que postulan que la igualdad juiciosa en tipos y elementos es una relación de equivalencia son las siguientes:\nΓ⊢A typeΓ⊢A=⋅A typeΓ⊢A=⋅B typeΓ⊢B=⋅A typeΓ⊢A=⋅B type Γ⊢B=⋅C typeΓ⊢A=⋅C typeΓ⊢a:AΓ⊢a=⋅a:AΓ⊢a=⋅b:AΓ⊢b=⋅a:AΓ⊢a=⋅b:A Γ⊢b=⋅c:AΓ⊢a=⋅c:A \\begin{array}{ccc} \\dfrac{\\Gamma \\vdash A ~~~ \\text{type}}{\\Gamma \\vdash A \\stackrel{\\cdot}{=} A ~~~ \\text{type}} \u0026 \\dfrac{\\Gamma \\vdash A \\stackrel{\\cdot}{=} B ~~~ \\text{type}}{\\Gamma \\vdash B \\stackrel{\\cdot}{=} A ~~~ \\text{type}} \u0026 \\dfrac{\\Gamma \\vdash A \\stackrel{\\cdot}{=} B ~~~ \\text{type} ~~~ ~~~ \\Gamma \\vdash B \\stackrel{\\cdot}{=} C ~~~ \\text{type}}{\\Gamma \\vdash A \\stackrel{\\cdot}{=} C ~~~ \\text{type}} \\\\ \u0026 \u0026 \\\\ \\dfrac{\\Gamma \\vdash a: A}{\\Gamma \\vdash a \\stackrel{\\cdot}{=} a: A}\u0026 \\dfrac{\\Gamma \\vdash a \\stackrel{\\cdot}{=} b: A}{\\Gamma \\vdash b \\stackrel{\\cdot}{=} a: A} \u0026 \\dfrac{\\Gamma \\vdash a \\stackrel{\\cdot}{=} b: A ~~~ ~~~ \\Gamma \\vdash b \\stackrel{\\cdot}{=} c: A}{\\Gamma \\vdash a \\stackrel{\\cdot}{=} c: A} \\end{array} Γ⊢A=⋅A typeΓ⊢A type​Γ⊢a=⋅a:AΓ⊢a:A​​Γ⊢B=⋅A typeΓ⊢A=⋅B type​Γ⊢b=⋅a:AΓ⊢a=⋅b:A​​Γ⊢A=⋅C typeΓ⊢A=⋅B type Γ⊢B=⋅C type​Γ⊢a=⋅c:AΓ⊢a=⋅b:A Γ⊢b=⋅c:A​​","los-elementos-genéricos#Los elementos genéricos":"Si tenemos un tipo AAA en un contexto Γ\\GammaΓ, podemos debilitar a AAA por sí mismo para obtener que AAA es un tipo en el contexto Γ,x:A\\Gamma, x: AΓ,x:A. La regla del elemento genérico afirma que cualquier elemento hipotético x:Ax: Ax:A en el contexto Γ,x:A\\Gamma, x: AΓ,x:A es también un elemento de tipo AAA en el contexto Γ,x:A\\Gamma, x: AΓ,x:A.\nΓ⊢A typeΓ,x:A⊢x:Aδ. \\dfrac{\\Gamma \\vdash A ~~~ \\text{type}}{\\Gamma, x: A \\vdash x: A}\\delta. Γ,x:A⊢x:AΓ⊢A type​δ.Esta regla también es conocida como la regla de la variable, nos da una función identidad sobre el tipo AAA en el contexto Γ\\GammaΓ.","reglas-de-conversión-de-variables#Reglas de conversión de variables":"Las reglas de conversión de variables son reglas que postulan que podemos convertir el tipo de una variable por un tipo juiciosamente igual. Γ⊢A=⋅A′ type Γ,x:A,Δ⊢B(x) typeΓ,x:A′,Δ⊢B(x) type. \\dfrac{\\Gamma \\vdash A \\stackrel{\\cdot}{=} A' ~~~ \\text{type} ~~~ ~~~ \\Gamma, x: A, \\Delta \\vdash B(x) ~~~ \\text{type}}{\\Gamma, x: A', \\Delta \\vdash B(x) ~~~ \\text{type}}. Γ,x:A′,Δ⊢B(x) typeΓ⊢A=⋅A′ type Γ,x:A,Δ⊢B(x) type​.En esta regla de conversión, el contexto Γ,x:A,Δ\\Gamma, x: A, \\DeltaΓ,x:A,Δ es cualquier extensión del contexto Γ,x:A\\Gamma, x: AΓ,x:A.\nSimilarmente, hay reglas de conversión de variables para la igualdad juiciosa de tipos, para elementos y para igualdad juiciosa de elementos. Podemos enunciar todas en una usando una tesis de juicio genérica J\\mathcal{J}J, que pueden ser cualquiera de las definidas en la definición 1.1.1:\nΓ⊢A=⋅A′ Γ,x:A,Δ⊢JΓ,x:A′,Δ⊢J. \\dfrac{\\Gamma \\vdash A \\stackrel{\\cdot}{=} A' ~~~ ~~~ \\Gamma, x: A, \\Delta \\vdash \\mathcal{J}}{\\Gamma, x: A', \\Delta \\vdash \\mathcal{J}}. Γ,x:A′,Δ⊢JΓ⊢A=⋅A′ Γ,x:A,Δ⊢J​. Una regla análoga de conversión de elementos convierte el tipo de un elemento a un tipo juiciosamente igual.","reglas-de-inferencia#Reglas de inferencia":"Ahora estamos listos para presentar el sistema de reglas de inferencia que conforman la teoría de tipos. Estas reglas son conocidas como reglas estructurales de la teoría de tipos. Hay seis conjuntos de reglas de inferencia:\nReglas sobre la formación de contextos, tipos y sus elementos. Reglas que postulan que la igualdad juiciosa es una relación de equivalencia. Reglas de conversión de variables. Reglas de substitución. Reglas de debilitamiento. El elemento genérico.","reglas-sobre-formación-de-contextos-tipos-y-sus-elementos#Reglas sobre formación de contextos, tipos y sus elementos":"Las siguientes reglas se siguen de las suposiciones sobre contextos, tipos y sus elementos y pueden usarse libremente en las derivaciones:\nΓ,x:A⊢B(x) typeΓ⊢A typeΓ⊢A=⋅B typeΓ⊢A typeΓ⊢A=⋅B typeΓ⊢B typeΓ⊢a:AΓ⊢A typeΓ⊢a=⋅bΓ⊢a:AΓ⊢a=⋅bΓ⊢b:A \\begin{array}{ccc} \\dfrac{\\Gamma, x: A \\vdash B(x) ~~~ \\text{type}}{\\Gamma \\vdash A ~~~ \\text{type}} \u0026 \\dfrac{\\Gamma \\vdash A \\stackrel{\\cdot}{=} B ~~~ \\text{type}}{\\Gamma \\vdash A ~~~ \\text{type}} \u0026 \\dfrac{\\Gamma \\vdash A \\stackrel{\\cdot}{=} B ~~~ \\text{type}}{\\Gamma \\vdash B ~~~ \\text{type}} \\\\ \u0026 \u0026 \\\\ \\dfrac{\\Gamma \\vdash a: A}{\\Gamma \\vdash A ~~~ \\text{type}} \u0026 \\dfrac{\\Gamma \\vdash a \\stackrel{\\cdot}{=} b}{\\Gamma \\vdash a: A} \u0026 \\dfrac{\\Gamma \\vdash a \\stackrel{\\cdot}{=} b}{\\Gamma \\vdash b: A} \\end{array} Γ⊢A typeΓ,x:A⊢B(x) type​Γ⊢A typeΓ⊢a:A​​Γ⊢A typeΓ⊢A=⋅B type​Γ⊢a:AΓ⊢a=⋅b​​Γ⊢B typeΓ⊢A=⋅B type​Γ⊢b:AΓ⊢a=⋅b​​","substitución#Substitución":"Supongamos que tenemos un tipo Γ,x:A,y1:B1,…,yn:Bn⊢C type \\Gamma, x: A, y_1: B_1, \\ldots, y_n: B_n \\vdash C ~~~ \\text{type} Γ,x:A,y1​:B1​,…,yn​:Bn​⊢C type y un elemento a:Aa: Aa:A en el contexto Γ\\GammaΓ. Entonces podemos substituir simultáneamente aaa por todas las ocurrencias de xxx en los tipos B1,…,BnB_1, \\ldots, B_nB1​,…,Bn​ y CCC para obtener\nΓ,y1:B1[a/x],…,yn:Bn[a/x]⊢C[a/x] type. \\Gamma, y_1: B_1[a/x], \\ldots, y_n: B_n[a/x] \\vdash C[a/x] ~~~ \\text{type}. Γ,y1​:B1​[a/x],…,yn​:Bn​[a/x]⊢C[a/x] type.Similarmente, podemos substituir aaa por xxx en un elemento c:Cc: Cc:C para obtener un elemento c[a/x]:C[a/x]c[a/x]: C[a/x]c[a/x]:C[a/x]. Así, la regla de substitución se enuncia para una tesis de juicio genérica J\\mathcal{J}J:\nΓ⊢a:A Γ,x:A,Δ⊢JΓ,Δ[a/x]⊢J[a/x]S. \\dfrac{\\Gamma \\vdash a: A ~~~ ~~~ \\Gamma, x: A, \\Delta \\vdash \\mathcal{J}}{\\Gamma, \\Delta[a/x] \\vdash \\mathcal{J}[a/x]}S. Γ,Δ[a/x]⊢J[a/x]Γ⊢a:A Γ,x:A,Δ⊢J​S.Añadimos dos “reglas de congruencia” para la substitución, postulando que la substitución por elementos juiciosamente iguales resulta en tipos y elementos juiciosamente iguales:\nΓ⊢a=⋅a′:A Γ,x:A,Δ⊢B typeΓ,Δ[a/x]⊢B[a/x]=⋅B[a′/x] typeΓ⊢a=⋅a′:A Γ,x:A,Δ⊢b:BΓ,Δ[a/x]⊢b[a/x]=⋅b[a′/x]:B[a/x]. \\begin{array}{c} \\dfrac{\\Gamma \\vdash a \\stackrel{\\cdot}{=} a': A ~~~ ~~~ \\Gamma, x: A, \\Delta \\vdash B ~~~ \\text{type}}{\\Gamma, \\Delta[a/x] \\vdash B[a/x] \\stackrel{\\cdot}{=} B[a'/x] ~~~ \\text{type}} \\\\ \\\\ \\dfrac{\\Gamma \\vdash a \\stackrel{\\cdot}{=} a': A ~~~ ~~~ \\Gamma, x: A, \\Delta \\vdash b: B}{\\Gamma, \\Delta[a/x] \\vdash b[a/x] \\stackrel{\\cdot}{=} b[a'/x]: B[a/x]}. \\end{array} Γ,Δ[a/x]⊢B[a/x]=⋅B[a′/x] typeΓ⊢a=⋅a′:A Γ,x:A,Δ⊢B type​Γ,Δ[a/x]⊢b[a/x]=⋅b[a′/x]:B[a/x]Γ⊢a=⋅a′:A Γ,x:A,Δ⊢b:B​.​ Definición 1.3.1: Cuando BBB es una familia de tipos osbre AAA en un contexto Γ\\GammaΓ y si tenemos a:Aa: Aa:A, entonces también decimos que B[a/x]B[a/x]B[a/x] es la fibra de BBB en aaa y escribimos B(a)B(a)B(a) para referirnos a esta fibra. Cuando bbb es una sección de la familia BBB sobre AAA en el contexto Γ\\GammaΓ, llamamos al elemento b[a/x]b[a/x]b[a/x] el valor de bbb en aaa y escribimos b(a)b(a)b(a)."},"title":"Teoría de tipos dependiente"},"/notas/tipos/rijke/funciones-dependientes/":{"data":{"":"","la-regla-de--formación#La regla de -formación":"","la-regla-de--introducción#La regla de -introducción":"Consideremos una sección bbb sobre AAA en un contexto Γ\\GammaΓ,es decir, consideremos Γ,x:A⊢b(x):B(x). \\Gamma, x: A \\vdash b(x): B(x). Γ,x:A⊢b(x):B(x). Vemos que bbb es una elección de un elemento de cada B(x)B(x)B(x), el tipo de la salida depende de x:Ax: Ax:A. La asignación x↦b(x)x \\mapsto b(x)x↦b(x) es, en este sentido, una función dependiente. El tipo de todas estas funciones es llamado tipo función dependiente, y lo escribimos como Π(x:A)B(x). \\Pi_{(x: A)} B(x). Π(x:A)​B(x). Hay cuatro reglas principales para los Π\\PiΠ-tipos:\nLa regla de formación, que nos dice como formar tipos función dependiente. La regla de introducción, que nos dice como introducir términos del tipo función dependiente. La regla de eliminación, que nos dice como usar términos arbitrarios del tipo función dependiente. Las reglas de computación, que nos dicen como interactúan las reglas de introducción y de eliminación. En los casos de las reglas de formación, introducción y eliminación, también necesitamos reglas que afirmen que estas construcciones preservar la igualdad juiciosa. Estas reglas son llamadas reglas de congruencia.\nLa regla de Π\\PiΠ-formación La regla de Π\\PiΠ-formación nos dice cómos e construyen los Π\\PiΠ-tipos. La idea es que Π(x:A)B(x)\\Pi_{(x: A)} B(x)Π(x:A)​B(x) es un tipo función dependiente, para cada familia de tipos BBB sobre AAA, de modo que la regla de PiPiPi-formación dice: Γ,x:A⊢B(x) typeΓ⊢Π(x:A)B(x) typeΠ. \\frac{\\Gamma, x: A \\vdash B(x) ~~~ \\text{type}}{\\Gamma \\vdash \\Pi_{(x: A)} B(x) ~~~ \\text{type}} \\Pi. Γ⊢Π(x:A)​B(x) typeΓ,x:A⊢B(x) type​Π. Esta regla simplemente dice que para formar el tipo Π(x:A)B(x)\\Pi_{(x: A)} B(x)Π(x:A)​B(x) en el contexto Γ\\GammaΓ, debemos tener una familia de tipos BBB sobre AAA en el contexto Γ\\GammaΓ.\nTambién requerimos que la regla de formación de tipos función dependiente preserva la igualdad juiciosa. Es decir, tenemos la regla de congruencia para Π\\PiΠ-tipos: Γ⊢A=⋅A′ type Γ,x:A⊢B(x)=⋅B′(x) typeΓ⊢Π(x:A)B(x)B(x)=⋅Π(x:A′)B′(x) typeΠ−eq \\frac {\\Gamma \\vdash A \\stackrel{\\cdot}{=} A' ~~~ \\text{type} ~~~ ~~~ \\Gamma,x: A \\vdash B(x) \\stackrel{\\cdot}{=} B'(x) ~~~ \\text{type}} {\\Gamma \\vdash \\Pi_{(x: A)} B(x) B(x) \\stackrel{\\cdot}{=} \\Pi_{(x: A')} B'(x) ~~~ \\text{type}} \\Pi-eq Γ⊢Π(x:A)​B(x)B(x)=⋅Π(x:A′)​B′(x) typeΓ⊢A=⋅A′ type Γ,x:A⊢B(x)=⋅B′(x) type​Π−eqLa regla de Π\\PiΠ-introducción La regla de introducción para funciones dependientes nos dice cómo podemos construir funciones dependientes del tipo Π(x:A)B(x)\\Pi_{(x: A)} B(x)Π(x:A)​B(x). La idea es que una función dependiente f:Π(x:A)B(x)f: \\Pi_{(x: A)} B(x)f:Π(x:A)​B(x) es una operación que lleva a x:Ax: Ax:A en f(x):B(x)f(x): B(x)f(x):B(x). Así, la regla de introducción de tipos dependientes postula que para construir una función dependiente debemos construir un término b(x):B(x)b(x): B(x)b(x):B(x) indizado por x:Ax: Ax:A en un contexto Γ\\GammaΓ:\nΓ,x:A⊢b(x):B(x)Γ⊢λx.b(x):Π(x:A)B(x)λ. \\dfrac{\\Gamma, x: A \\vdash b(x): B(x)}{\\Gamma \\vdash \\lambda x. b(x) : \\Pi_{(x: A)} B(x)}\\lambda. Γ⊢λx.b(x):Π(x:A)​B(x)Γ,x:A⊢b(x):B(x)​λ.Esta regla de introducción para funciones dependientes también es llamada la regla de λ\\lambdaλ-abstracción y decimos que la λ\\lambdaλ-abstracción λx.b(x)\\lambda x. b(x)λx.b(x) liga la variable xxx en bbb. También requerimos que la λ\\lambdaλ-abstracción preserve la igualdad juiciosa. Así que postulamos la regla de congruencia para la λ\\lambdaλ-abstracción, que dice\nΓ,x:A⊢b(x)=⋅b′(x):B(x)Γ⊢λx.b(x)=⋅λx.b′(x):Π(x:A)B(x)λ−eq. \\dfrac{\\Gamma, x: A \\vdash b(x) \\stackrel{\\cdot}{=} b'(x): B(x)}{\\Gamma \\vdash \\lambda x. b(x) \\stackrel{\\cdot}{=} \\lambda x. b'(x): \\Pi_{(x: A)} B(x)}\\lambda-eq. Γ⊢λx.b(x)=⋅λx.b′(x):Π(x:A)​B(x)Γ,x:A⊢b(x)=⋅b′(x):B(x)​λ−eq."},"title":"Funciones dependientes"}}